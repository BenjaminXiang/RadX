#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#define COUNTING_STAGE
#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared addrw_t localCounts[RADICES], addrL[VEC_SIZE][Wave_Size*ivectr];
shared sgp_tp validAddressL[VEC_SIZE], prtMskL[VEC_SIZE][Wave_Size];
shared m8pq utype_t keyL[VEC_SIZE][Wave_Size*ivectr];
shared blocks_info blocks;

#define addrW addrL[w][li]
#define keyM keys[push_block.Shift&1].data[addrW]

#ifndef INTERLEAVED_PARTITION
#define prtsumW prtsumL[w][ln]
#define fsLaneW fsLaneL[w][ln]
#define keyW keyL[w][ln]
#else
#define prtsumW prtsumL[w][li]
#define fsLaneW fsLaneL[w][li]
#define keyW keyL[w][li]
#endif

#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform readonly workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_t data[]; } keys[];

// 
layout ( binding = 3, set = 0, scalar ) workgroupcoherent buffer HistogramB { uint counts[][RADICES]; };
//layout ( binding = 5, set = 0, scalar ) workgroupcoherent buffer ReferenceB { uint data[]; } offsets[];

// 
const lowp int blp = 8-bshift;
void main() {
    const lowp uint w = Wave_Idx, wT = w>>VEC_SHIF, wC = Wave_Count_RT>>VEC_SHIF, ln = Lane_Idx;//w * Wave_Size_RT + Lane_Idx;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) localCounts[radice] = 0u;
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = bitfieldInsert(i,ln,bshift,blp); addrW = blocks.offset + bitfieldInsert(i,Local_Idx,bshift,blp); }; };
    subgroupBarrier();

    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        btype_v predicate = btype_v(false);
        [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = bitfieldInsert(i,ln,bshift,blp);
            predicate wmI = lessThan(addrW, addrw_t(blocks.limit));
        }};
        IFALL(all(not(predicate))) break;

        // 
//#define ptnmask prtMskL[w][uint(keyW)]
#define prmskM prtMskL[w][ln]
#define validM validAddressL[w]
#if (defined(AMD_PLATFORM))
#define prmskL prmskM
#define validL validM
const lowp uint bms = 63;
#else
#define prmskL prmskM[i]
#define validL validM[i]
const lowp uint bms = 31;
//const lowp uint bms = 63;
#endif

        // 
        [[flatten]] if (w < VEC_SIZE) { validM = sgpble(predicate);
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = bitfieldInsert(i,ln,bshift,blp); keyW = extractKey(keyM, push_block.Shift); };
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = bitfieldInsert(i,ln,bshift,blp); addrW += (Wave_Size_RT<<bshift) << VEC_SHIF; };
        };

        // 
        //[[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = i*Wave_Size_RT + Lane_Idx; ptnmask = DEF_MASK; }; };
        //[[flatten]] if (w < VEC_SIZE) { ptnmask = DEF_MASK; };
        [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = i*Wave_Size_RT + Lane_Idx;
#ifndef ENABLE_SUBGROUP_PARTITION_SORT
            [[unroll]] for (lowp uint r=0;r<RADICES;r++) [[flatten]] if (keyW == r) 
#endif
            { prmskL = sgpexc(keyW) & validL; };
        //}};
        //[[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { const lowp uint li = bitfieldInsert(i,ln,bshift,blp), bnt = bitcnt(ptnmask);
            [[flatten]] if ((li&bms) == lsb(prmskL) && prmskL > 0u) { atomicAdd(localCounts[uint(keyW)], bitcnt(prmskL), gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
        }};
        //[[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { addrW += ( (Wave_Size_RT<<bshift) << VEC_SHIF ); }};
    };
    subgroupBarrier();
    
    // resolve histograms 
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) {
        const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { counts[gl_WorkGroupID.x][radice] = localCounts[radice+0u]; };
    };
};
