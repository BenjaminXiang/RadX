#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"


#include "./includes.glsl"

layout (local_size_x = Wave_Size*Wave_Count) in;
shared addrw_t localCounts[RADICES], addrL[VEC_SIZE][Wave_Size], localPartitions[RADICES], prtsumL[VEC_SIZE][Wave_Size];
shared sgp_tp validAddressL[VEC_SIZE], prtMskL[VEC_SIZE][RADICES];
shared utype_t keyL[VEC_SIZE][Wave_Size];
shared blocks_info blocks;

#define addrW addrL[w][ln]
#define keyM keysIn[push_block.Shift&1].data[addrW]
#define prtsumW prtsumL[w][ln]
#define fsLaneW fsLaneL[w][ln]
#define keyW keyL[w][ln]
#define bcount blocks.count

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_t data[]; } keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysInB { keytp_t data[]; } keysIn[];
  layout ( binding = 0, set = InputKeys, scalar )          subgroupcoherent buffer KeysOutB { keytp_t data[]; } keysOut[];
  layout ( binding = 4, set = 0, scalar ) readonly workgroupcoherent buffer PrefixSumB { uint partitions[][RADICES]; };
// 


// 
const lowp int blp = 10-bshift;
void main() {
    const lowp uint w = Local_Idx>>4u, ln = Local_Idx&15u;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { localPartitions[radice] = partitions[gl_WorkGroupID.x][radice], localCounts[radice] = 0u; };
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    [[flatten]] if (w < VEC_SIZE) { addrW = blocks.offset + Local_Idx; };
    subgroupBarrier();

    // 
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        const bool predicate = lessThan(addrW, addrw_t(blocks.limit));
        IFALL(all(not(predicate))) break;

        // 
#define prmskM prtMskL[w][uint(keyW)]
#define validM validAddressL[w]
#define prmskL prmskM
#define validL validM

        // 
        [[flatten]] if (w < VEC_SIZE) { validM = sgpble(predicate), keyW = extractKey(keyM, push_block.Shift), prmskL = sgpexc(keyW) & validL; };
        [[flatten]] if (w < VEC_SIZE) {
            subgroupBarrier();
            [[flatten]] if (w == 0u) [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) { prtsumW = localCounts[uint(keyW)]; // critically calculate partition offset
                [[flatten]] if (ln == lsb(uint(prmskL)) && prmskL > 0u) { atomicAdd(localCounts[uint(keyW)], bitcnt(uint(prmskL)), gl_ScopeSubgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
            };
            subgroupBarrier();
            [[flatten]] if (bltinv(prmskL)) { keysOut[1-(push_block.Shift&1)].data[localPartitions[uint(keyW)] + prtsumW + sgpcnt(prmskL)] = keyM; addrW += gl_WorkGroupSize.x; };
        };

    };
};
