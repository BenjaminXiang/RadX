#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

// default values
#include "./includes.glsl"


// current work group size
const uint WG_COUNT = 108u;

// local size 
const uint Wave_Size_RX = 16u;
const uint Wave_Count_RX = 32u;
const uint local_size_def = Wave_Size_RX * Wave_Count_RX;//16u;
layout ( local_size_x = local_size_def) in; // use many as possible

// shared memory of...
shared uint localPartitions[RADICES];
shared uint localPartSum[Wave_Count_RX];

// 
layout ( binding = 3, set = 0, scalar ) readonly subgroupcoherent buffer HistogramB {uint counts[][RADICES]; };
layout ( binding = 4, set = 0, scalar )          subgroupcoherent buffer PrefixSumB {uint partitions[][RADICES]; };

// Still in Emulation 
// X axis is workgroup count, Y is radices
void main() {
    const lowp uint w = Local_Idx>>4u, ln = Local_Idx&15u;
    [[flatten]] if (Local_Idx < RADICES) localPartitions[Local_Idx] = 0u;

    subgroupBarrier();
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=Wave_Count_RX) {
        const lowp uint radice = rk+w;
        [[flatten]] if (radice < RADICES) { // calculate partitions by work-groups for every radice
            [[unroll]] for (lowp uint gp=0u;gp<WG_COUNT;gp+=Wave_Size_RX) {
                const lowp uint workgroup = gp+ln;
                const uint16_t mask = sgrblt(workgroup < WG_COUNT && radice < RADICES);
                const uint 
                    histv = bltinv(mask) ? counts[workgroup][radice] : 0u,
                    scan = sgrsumex(histv),
                    sum = sgrshf(histv + scan, msb(uint(mask)));

                const uint pref = localPartitions[radice]; [[flatten]] if (lsb(uint(mask))==ln) { localPartitions[radice] += sum; }; //pref = readFLane(pref);
                [[flatten]] if (bltinv(mask)) { partitions[workgroup][radice] = (pref + scan); };
            };
        };
    };

    subgroupBarrier();
    const uint WG_COUNT_UP = tiled(WG_COUNT, Wave_Count_RX)*Wave_Count_RX;
    [[unroll]] for (lowp uint gp=0u;gp<WG_COUNT_UP;gp+=Wave_Count_RX) {
        const lowp uint workgroup = gp+w;
        [[flatten]] if (workgroup < WG_COUNT) { uint partsum = 0u; // calculate partition offsets of every radice
            [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=Wave_Size_RX) {
                const lowp uint radice = rk+ln;
                const uint16_t mask = sgrblt(workgroup < WG_COUNT && radice < RADICES);
                const uint 
                    histv = bltinv(mask) ? localPartitions[radice] : 0u,
                    scan = sgrsumex(histv),
                    sum = sgrshf(histv + scan, msb(uint(mask)));

                const uint pref = sgrshf(partsum,0u); [[flatten]] if (lsb(uint(mask))==ln) { partsum += sum; }; //pref = readFLane(pref);
                [[flatten]] if (bltinv(mask)) { partitions[workgroup][radice] += (pref + scan); };
            };
        };
    };
};
