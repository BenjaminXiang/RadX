#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define ENABLE_RTX_EDITION
#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#define COUNTING_STAGE
#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared addrw_t localCounts[RADICES], addrL[BLOCK_SIZE];
shared uint32_t validAddressL[ivectr], prtMskL[Wave_Size][ivectr];
shared m8pq utype_t keyL[ivectr][Wave_Size];
shared blocks_info blocks;

#define addrW addrL[Local_Idx]
#define keyM keys[push_block.Shift&1].data[addrW]
#define keyW keyL[i][Lane_Idx]
#define bcount blocks.count


  layout ( binding = 0, set = InputKeys, scalar ) readonly workgroupcoherent buffer KeysB { keytp_t data[]; } keys[];
  layout ( binding = 3, set = 0, scalar ) workgroupcoherent buffer HistogramB { uint counts[][RADICES]; };


// 
void main() {
    const lowp uint w = 0u, ln = Lane_Idx, i = Wave_Idx;
    const lowp uint wID = Lane_Idx&7, smID = Lane_Idx>>3;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) localCounts[radice] = 0u;
    };

    // 
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    addrW = blocks.offset + Local_Idx;
    subgroupBarrier();

    // 
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
#define prmskL prtMskL[Lane_Idx][i]
#define validL validAddressL[i]

        const bool predicate = addrW < blocks.limit; IFALL(!predicate) break; validL = subgroupBallot(predicate).x;

        {
            keyW = extractKey(keyM, push_block.Shift), addrW += Wave_Size_RT<<bshift, prmskL = sgpexc(keyW) & validL;
            [[flatten]] if (Lane_Idx == lsb(prmskL) && prmskL > 0u) { atomicAdd(localCounts[uint(keyW)], bitcnt(prmskL), gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
        };
    };
    subgroupBarrier();

    // resolve histograms 
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { counts[gl_WorkGroupID.x][radice] = localCounts[radice+0u]; };
    };
};
