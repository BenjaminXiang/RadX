#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#define COUNTING_STAGE
#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared uint localCounts[RADICES];

// 
shared m8pq utype_v keyL[VEC_SIZE][Wave_Size];


shared addrw_v addrL[VEC_SIZE*Wave_Size], prtscnL[VEC_SIZE][Wave_Size];
shared lowp uint prtsumL[VEC_SIZE][Wave_Size], fsLaneL[VEC_SIZE][Wave_Size];
shared bqualf uvec4[VEC_SIZE] validAddressL;

shared blocks_info blocks;

#define addrW addrL[Local_Idx]
#define keyW keyL[w][Lane_Idx]
#define keyM keys[push_block.Shift&1].data[addrW.x>>bshift]//kymL[Local_Idx]
#define prtsumW prtsumL[w][Lane_Idx]
#define fsLaneW fsLaneL[w][Lane_Idx]
#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform readonly workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_v data[]; } keys[];

// 
layout ( binding = 3, set = 0, scalar ) workgroupcoherent buffer HistogramB { uint counts[][RADICES]; };
//layout ( binding = 5, set = 0, scalar ) workgroupcoherent buffer ReferenceB { uint data[]; } offsets[];

// 
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + Wave_Idx);
    const lowp uint w = Wave_Idx, Wr = Wc * w;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) {
        const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) localCounts[radice] = 0u;
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // calculate blocks
    [[flatten]] if (w < VEC_SIZE) { 
        addrW = ((Local_Idx)<<bshift) + addrw_seq + blocks.offset;
    };
    subgroupBarrier();

    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        btype_v predicate = lessThan(addrW, addrw_v(blocks.limit));
        [[flatten]] if (w < VEC_SIZE) { prtsumW = addrw_v(0u); };
        IFALL(all(not(predicate))) break;
        [[flatten]] if (w < VEC_SIZE) { keyW = extractKey(keyM, push_block.Shift), validAddressL[w] = sgr_blt(predicate); };

#ifdef ENABLE_SUBGROUP_PARTITION_SORT // subgroup partition supported now (interleaving currently not supported, need HW support)
#ifndef INTERLEAVED_PARTITION
        [[flatten]] if (w < VEC_SIZE) {
            const bqualf uvec4 prtmask = sgr_prt(keyW)&validAddressL[w];
            prtsumW = utype_t(subgroupBallotBitCount(prtmask)), fsLaneW = utype_t(subgroupBallotFindLSB(prtmask));
        };
#else
        [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
            const highp uvec4 prtmask = (encodeMorton32x2(sgr_prt(keyW[i]))<<i) & validAddressL[w];
            prtsumW[i] = utype_t(bitcnt(prtmask)), fsLaneW[i] = utype_t(lsb(prtmask));
        };};
#endif
#else
        [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint r=0;r<RADICES;r+=1u) { [[flatten]] if (keyW == r) {
            const bqualf uvec4 prtmask = sgr_blt(true);
            prtsumW = utype_t(subgroupBallotBitCount(prtmask)), fsLaneW = readFLane(Lane_Idx);
        };};};
#endif

        [[flatten]] if (w < VEC_SIZE) {
#ifndef INTERLEAVED_PARTITION
            [[flatten]] if (fsLaneW == Lane_Idx && predicate) { atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
#else
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
                [[flatten]] if ((fsLaneW[i]>>bshift) == Lane_Idx && predicate[i]) { atomicAdd(localCounts[uint(keyW[i])], prtsumW, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };};
#endif
            addrW += ( (Wave_Size_RT<<bshift) << VEC_SHIF );
        };
    };
    subgroupBarrier();
    
    // resolve histograms 
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) {
        const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { counts[gl_WorkGroupID.x][radice] = localCounts[radice+0u]; };
    };
};
