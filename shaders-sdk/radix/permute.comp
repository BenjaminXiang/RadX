#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared uint localPrefix[RADICES];

// planned 64-wide for Turing
shared m8pq utype_t keyL[VEC_SIZE][Wave_Size];
shared uint addrL[VEC_SIZE*Wave_Size], prefixL[VEC_SIZE][Wave_Size];//, ptrL[VEC_SIZE][Wave_Size];
shared highp uvec4[VEC_SIZE] validAddressL;
shared blocks_info blocks;

#define prefixW prefixL[w][Lane_Idx]
#define addrW addrL[Local_Idx]
#define keyW keyL[w][Lane_Idx]
#define ptrW ptrL[w][Lane_Idx]
#define validAddress subgroupInverseBallot(validAddressL[w])
#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
#ifdef SIMPLER_READ_U8
layout ( binding = 0, set = InputKeys, scalar ) workgroupcoherent buffer KeyInB { u8vec4 data[]; } keys[];
#else
layout ( binding = 0, set = InputKeys, scalar ) workgroupcoherent buffer KeyInB { KEYTYPE data[]; } keys[];
#endif

// 
layout ( binding = 4, set = 0, scalar ) readonly workgroupcoherent buffer PrefixSumB { uint PrefixSum[][RADICES]; };
layout ( binding = 5, set = 0, scalar ) readonly workgroupcoherent buffer ReferenceB { uint data[]; } references[];

// 
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + w);
    const lowp uint w = Wave_Idx, Wr = Wc * w;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { localPrefix[radice+0u] = PrefixSum[gl_WorkGroupID.x][radice]; };
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    LGROUP_BARRIER
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks (use radice prefix as offset)
    [[flatten]] if (w < VEC_SIZE) { addrW = blocks.offset + Local_Idx; };
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        [[flatten]] if (w < VEC_SIZE) validAddressL[w] = subgroupBallot(lessThan(addrW, blocks.limit));
        IFALL(all(not(validAddress))) break;

        [[flatten]] if (w < VEC_SIZE) {
#ifdef SIMPLER_READ_U8
            keyW = validAddress ? utype_t(keys[push_block.Shift&1].data[addrW][push_block.Shift]) : utype_t(RADICES_MASK),
#else
            keyW = validAddress ? utype_t(BFE(keys[push_block.Shift&1].data[addrW],int(push_block.Shift)*BITS_PER_PASS,BITS_PER_PASS)) : utype_t(RADICES_MASK),
#endif
            prefixW = references[0].data[addrW];
        };
        [[flatten]] if (w < VEC_SIZE) {
            [[flatten]] if (validAddress) { prefixW += localPrefix[uint(keyW)], keys[1-(push_block.Shift&1)].data[prefixW] = keys[push_block.Shift&1].data[addrW]; }; // copy from backup to inner store
            addrW += ( Wave_Size_RT << VEC_SHIF );
        };
    };
};
