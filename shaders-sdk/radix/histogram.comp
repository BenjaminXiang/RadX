#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#define HISTOGRAM_STAGE
#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared uint localHistogram[RADICES];

// planned 64-wide for Turing
shared m8pq utype_t _data[VEC_SIZE][Wave_Size];
shared uint addrL[VEC_SIZE][Wave_Size]; //shared uint addrT[Wave_Size];
shared highp uvec4[VEC_SIZE] validAddressL;
shared blocks_info blocks;
#define keyW _data[w][Lane_Idx]
#define addrW addrL[w][Lane_Idx]
#define validAddress subgroupInverseBallot(validAddressL[w])
#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
layout ( binding = 2, set = 0, scalar ) readonly subgroupcoherent buffer RadiceCacheOutB { uint8_t Key8t[]; };
layout ( binding = 0, set = 0, scalar ) readonly workgroupcoherent buffer KeyInterfaceB { uint32_t data[]; } keys[];

// 
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + Wave_Idx);
    const lowp uint w = Wave_Idx, Wr = Wc * w;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) {
        const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) localHistogram[radice+0u] = 0u;
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    LGROUP_BARRIER
    [[flatten]] IFANY (bcount <= 0) return;

    // calculate blocks
    [[flatten]] if (w < VEC_SIZE) { addrW = blocks.offset + Local_Idx; };
    //[[flatten]] if (w < 1u) { addrWt = blocks.wkoffset + Lane_Idx*1u + w; };
    
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        LGROUP_BARRIER
        [[flatten]] if (w < VEC_SIZE) validAddressL[w] = subgroupBallot(lessThan(addrW, blocks.limit));
        IFALL(all(not(validAddress))) break;

        [[flatten]] if (w < VEC_SIZE) { keyW = validAddress ? utype_t(Key8t[addrW]) : utype_t(0xFFu); }; // shorter way to get radices (cached)
        //[[flatten]] if (w < VEC_SIZE) { keyW = utype_t(mix(RADICES_MASK,BFE(keys[0].data[addrW],int(push_block.Shift)*BITS_PER_PASS,BITS_PER_PASS),validAddress)); };

#ifdef ENABLE_SUBGROUP_PARTITION_SORT
        [[flatten]] if (w < VEC_SIZE) 
#else
        LGROUP_BARRIER
        [[unroll]] for (lowp uint w=0u;w<VEC_SIZE;w++) 
#endif
        {
#ifdef ENABLE_SUBGROUP_PARTITION_SORT // subgroup partition supported now 
            const highp uvec4 blt = subgroupPartitionNV(keyW)&validAddressL[w];
            const uint btc = subgroupPartitionedAddNV(1u,blt), fLn = subgroupBallotFindMSB(blt);
            [[flatten]] if (fLn == Lane_Idx && validAddress) { atomicAdd(localHistogram[uint(keyW)], btc, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
#else
#ifdef SIMPLER_SORT
            [[flatten]] if (keyW == Wr && validAddress) {
                const lowp uint btc = subgroupAdd(1u);
                [[flatten]] if (subgroupElect()) { atomicAdd(localHistogram[uint(keyW)], btc); };
            };
#else
            bool found = !validAddress || keyW<Wr || keyW>=(Wr+Wc);
             for (lowp uint t=0;t<BSIZE;t+=1u) {
                [[flatten]] if (!found && (found = subgroupMin(keyW)==keyW)) {
                    const lowp uint btc = subgroupAdd(1u);
                    [[flatten]] if (subgroupElect()) { localHistogram[uint(keyW)] += btc; };
                };
                [[flatten]] if ( subgroupAll(found) ) { break; };
            };
#endif
#endif
        };

        LGROUP_BARRIER
            [[flatten]] if (w < VEC_SIZE) { addrW += ( Wave_Size_RT << VEC_SHIF ); };
            //[[flatten]] if (w < 1u) { addrWt += Wave_Size_RT; };
    };

    // resolve histograms (planned distribute threads) 
    LGROUP_BARRIER
    
    [[flatten]] if (w == 0u) 
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=Wave_Size_RT) {
        const lowp uint radice = rk + Lane_Idx;
        [[flatten]] if (radice < RADICES) {
            PrefixSum[gl_WorkGroupID.x][radice] = localHistogram[radice+0u];
            Histogram[gl_WorkGroupID.x][radice] = localHistogram[radice+0u];
        };
    };
};
