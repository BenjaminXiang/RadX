#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"

#include "./includes.glsl"


layout (local_size_x = BLOCK_SIZE) in;
shared uint localCounts[RADICES], localPartitions[RADICES];

// 
shared keytp_v kymL[VEC_SIZE*Wave_Size];

shared m8pq utype_v keyL[VEC_SIZE][Wave_Size];
shared addrw_v prtsumL[VEC_SIZE][Wave_Size], fsLaneL[VEC_SIZE][Wave_Size], addrL[VEC_SIZE*Wave_Size];
shared bqualf uvec4[VEC_SIZE] validAddressL;
shared vqualf uvec4 prtMskL[VEC_SIZE][RADICES];

shared blocks_info blocks;

#define addrW addrL[Local_Idx]
#define prtMskW prtMskL[w]
//#define prtscnW prtscnL[w][Lane_Idx]

#ifndef INTERLEAVED_PARTITION
#define prtsumW prtsumL[wcmsk][Lane_Idx]
#define fsLaneW fsLaneL[wcmsk][Lane_Idx]
#define keyW keyL[wcmsk][Lane_Idx]
#else
#define prtsumW prtsumL[wcmsk][Lane_Idx][i]
#define fsLaneW fsLaneL[wcmsk][Lane_Idx][i]
#define keyW keyL[wcmsk][Lane_Idx][i]
#endif


#define keyM keys[push_block.Shift&1].data[addrW.x>>bshift]//kymL[Local_Idx]
//#define validAddress subgroupInverseBallot(validAddressM)
//#define validAddress subgroupInverseBallot(validAddressL[w])
#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_v data[]; } keys[];
  layout ( binding = 0, set = InputKeys, scalar )          subgroupcoherent buffer KeysOutB { keytp_t data[]; } keysOut[];

// 
layout ( binding = 4, set = 0, scalar ) readonly workgroupcoherent buffer PrefixSumB { uint partitions[][RADICES]; };

// 
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + w);
    //const lowp uint w = Wave_Idx, Wr = Wc * w;
    const lowp uint w = Wave_Idx, wT = w>>VEC_SHIF, wC = Wave_Count_RT>>VEC_SHIF;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { localPartitions[radice] = partitions[gl_WorkGroupID.x][radice], localCounts[radice] = 0u; };
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    [[flatten]] if (w < VEC_SIZE) { addrW = ((Local_Idx)<<bshift) + addrw_seq + blocks.offset; };
    subgroupBarrier();
    
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        btype_v predicate = lessThan(addrW, addrw_v(blocks.limit));
        [[flatten]] if (w < VEC_SIZE) { prtsumL[w][Lane_Idx] = addrw_v(0u); };
        IFALL(all(not(predicate))) break;

#ifndef INTERLEAVED_PARTITION
        [[flatten]] if (w < VEC_SIZE && predicate) { keyW = extractKey(keyM, push_block.Shift), validAddressL[w] = sgrblt(true); };
    #ifdef ENABLE_SUBGROUP_PARTITION_SORT
        bqualf uvec4 prtmask = uvec4(0u);
    #else
        #define prtmask prtMskW[uint(keyW)]
    #endif
#else
        [[flatten]] if (w < VEC_SIZE) { keyL[w][Lane_Idx] = extractKey(keyM, push_block.Shift), validAddressL[w] = sgrblt(predicate); };
        highp uvec4 prtmskM[ivectr];
        #define prtmask prtmskM[i]
#endif


#ifdef ENABLE_SUBGROUP_PARTITION_SORT // subgroup partition supported now
    #ifndef INTERLEAVED_PARTITION
        [[flatten]] if (w < VEC_SIZE) {
            prtmask = sgrprt(keyW) & validAddressL[w],  prtsumW = subgroupBallotBitCount(prtmask), fsLaneW = subgroupBallotFindLSB(prtmask);
        };
    #else // subgroup interleaving support (NVIDIA)
        [[flatten]] if (w < VEC_SIZE) {
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
                prtmask = (interleave32x2(sgrprt(keyW))<<i) & validAddressL[w], prtsumW = bitcnt(prtmask), fsLaneW = lsb(prtmask)>>bshift;
                [[flatten]] if (fsLaneW == Lane_Idx) { prtMskW[uint(keyW)] = uvec4(0u); };
            };
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
                [[flatten]] if (fsLaneW == Lane_Idx) { prtMskW[uint(keyW)] |= prtmask; };
            };
        };
    #endif
#else
        [[unroll]] for (lowp uint r=0;r<RADICES;r+=wC) { [[flatten]] if (keyW == (r+wT) && subgroupInverseBallot(validAddressL[wcmsk])) {
            const bqualf uvec4 prtmskM = sgrblt(true);
            prtsumW = subgroupBallotBitCount(prtmskM), fsLaneW = readFLane(Lane_Idx);
            [[flatten]] if (fsLaneW == Lane_Idx) { prtMskW[uint(keyW)] = prtmskM; };
        }};
#endif

        subgroupBarrier();
#ifndef INTERLEAVED_PARTITION
        [[flatten]] if (w == 0u) { [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) { // critically calculate partition offset
            uint count = localCounts[uint(keyW)];
            [[flatten]] if (fsLaneW == Lane_Idx && prtsumW > 0) { atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeSubgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
            prtsumW = count;
        }};
#else   // subgroup interleaving support (NVIDIA)
        [[flatten]] if (w == 0u) { [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) { // critically calculate partition offset
        addrw_v count = addrw_v(0u); [[unroll]] for (lowp uint i=0;i<ivectr;i++) { count[i] = localCounts[uint(keyW)]; };
        [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
            [[flatten]] if (fsLaneW == Lane_Idx && prtsumW > 0) { atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeSubgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
            prtsumW = count[i];
        }}};
#endif

        subgroupBarrier();
        [[flatten]] if (w < VEC_SIZE) { // TODO: local sorting to avoid cache missing or using TBO
#ifdef INTERLEAVED_PARTITION
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) { [[flatten]] if (predicate[i]) { // copy from backup to inner store
                const lowp uint prtscnW = bitcnt(prtMskW[uint(keyW)]&genLt2Mask(i));
                keysOut[1-(push_block.Shift&1)].data[prtscnW + prtsumW + localPartitions[uint(keyW)]] = keyM[i]; 
            }};
#else
            [[flatten]] if (subgroupInverseBallot(prtmask)) {
                const lowp uint prtscnW = subgroupBallotExclusiveBitCount(prtmask);
                keysOut[1-(push_block.Shift&1)].data[prtscnW + prtsumW + localPartitions[uint(keyW)]] = keyM; };
#endif
            //subgroupBarrier(); // barrier faster memory operation
            addrW += ( (Wave_Size_RT<<bshift) << VEC_SHIF );
        };
    };
};
