#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"


#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared uint localCounts[RADICES], localPartitions[RADICES];

// 
shared m8pq utype_v keyL[VEC_SIZE][Wave_Size];
shared keytp_v kymL[VEC_SIZE*Wave_Size];

shared addrw_v addrL[VEC_SIZE*Wave_Size], prtsumL[VEC_SIZE][Wave_Size];
shared lowp addrw_v prtscnL[VEC_SIZE][Wave_Size], fsLaneL[VEC_SIZE][Wave_Size];
shared bqualf uvec4[VEC_SIZE] validAddressL;

shared blocks_info blocks;

#define addrW addrL[Local_Idx]
#define prtscnW prtscnL[w][Lane_Idx]
#define prtsumW prtsumL[w][Lane_Idx]
#define fsLaneW fsLaneL[w][Lane_Idx]
#define keyW keyL[w][Lane_Idx]
#define keyM keys[push_block.Shift&1].data[addrW.x>>bshift]//kymL[Local_Idx]
//#define validAddress subgroupInverseBallot(validAddressM)
//#define validAddress subgroupInverseBallot(validAddressL[w])
#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_v data[]; } keys[];
  layout ( binding = 0, set = InputKeys, scalar )          subgroupcoherent buffer KeysOutB { uint32_t data[]; } keysOut[];

// 
layout ( binding = 4, set = 0, scalar ) readonly workgroupcoherent buffer PrefixSumB { uint partitions[][RADICES]; };
//layout ( binding = 5, set = 0, scalar ) readonly workgroupcoherent buffer ReferenceB { uint data[]; } offsets[];

// 
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + w);
    //const lowp uint w = Wave_Idx, Wr = Wc * w;
    const lowp uint w = Wave_Idx, Wr = Wc * w, Wx = tiled(Wave_Size_RT, Wave_Count_RT);

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { localPartitions[radice] = partitions[gl_WorkGroupID.x][radice], localCounts[radice] = 0u; };
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    [[flatten]] if (w < VEC_SIZE) { 
        addrW = ((Local_Idx)<<bshift) + addrw_seq + blocks.offset;
    };
    subgroupBarrier();
    
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        btype_v predicate = lessThan(addrW, addrw_v(blocks.limit));

        [[flatten]] if (w < VEC_SIZE) {
            //keyM = keys[push_block.Shift&1].data[addrW],
            keyW = utype_v(extractKey(keyM, push_block.Shift)),
            validAddressL[w] = sgr_blt(predicate);
            prtsumW = addrw_v(0u), prtscnW = addrw_v(0u);
            //prtscnW = offsets[0].data[addrW];
        };
        IFALL(all(not(predicate))) break;

#ifdef ENABLE_SUBGROUP_PARTITION_SORT // subgroup partition supported now 
        const bqualf uvec4 prtmask = sgr_prt(keyW)&validAddressL[w];
        [[flatten]] if (w < VEC_SIZE) { prtscnW = addrw_v(subgroupBallotBitCount(prtmask&genLtNMask(bshift))), prtsumW = addrw_v(subgroupBallotBitCount(prtmask)), fsLaneW = addrw_v(subgroupBallotFindLSB(prtmask)); };
        
        // critical block (interleaving currently not supported)
        subgroupBarrier();
        [[flatten]] if (w == 0u) { [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) { // critically calculate partition offset
            [[flatten]] if (fsLaneW == Lane_Idx) { prtsumW = atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeSubgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); }; prtsumW = subgroupShuffle(prtsumW,fsLaneW);
            //prtscnW += prtsumW;
        }};
#else
        // 
        subgroupBarrier();
        [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) {
    #ifdef SIMPLER_SORT
            [[unroll]] for (lowp uint r=0;r<RADICES;r+=Wave_Count_RT) {
                [[flatten]] if (keyW == (r + Wave_Idx)) {
                    const bqualf uvec4 prtmask = sgr_blt(true)&validAddressL[w];
                    prtsumW = utype_t(subgroupBallotBitCount(prtmask));

                    [[flatten]] if (subgroupElect()) { prtsumW = atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
                    prtsumW = readFLane(prtsumW), prtscnW = utype_t(subgroupBallotBitCount(prtmask&genLtMask()));
                    //prtscnW += prtsumW;
                }};
    #else
            bool found = !subgroupInverseBallot(validAddressL[w]) || keyW<Wr || keyW>=(Wr+Wc);
            for (lowp uint t=0;t<BSIZE;t+=1u) {
                [[flatten]] if (!found && (found = subgroupMin(keyW)==keyW)) {
                    const bqualf uvec4 prtmask = sgr_blt(true)&validAddressL[w];
                    prtsumW = utype_t(subgroupBallotBitCount(prtmask));

                    [[flatten]] if (subgroupElect()) { prtsumW = atomicAdd(localCounts[uint(keyW)], prtsumW, gl_ScopeWorkgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
                    prtsumW = readFLane(prtsumW), prtscnW = utype_t(subgroupBallotBitCount(prtmask&genLtMask()));
                    //prtscnW += prtsumW;
                };
                [[flatten]] if ( subgroupAll(found) ) { break; };
            };
    #endif
        };
#endif

        // 
        subgroupBarrier();
        [[flatten]] if (w < VEC_SIZE) { // TODO: local sorting to avoid cache missing or using TBO
#ifdef false//ENABLE_TURING_INSTRUCTION_SET
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) {
                [[flatten]] if (predicate[i]) { keysOut[1-(push_block.Shift&1)].data[prtscnW[i] + prtsumW[i] + localPartitions[uint(keyW[i])]] = keyM[i]; }; // copy from backup to inner store
            };
#else
            [[flatten]] if (predicate) { keysOut[1-(push_block.Shift&1)].data[prtscnW + prtsumW + localPartitions[uint(keyW)]] = keyM; }; // copy from backup to inner store
#endif
            subgroupBarrier(); // barrier faster memory operation
            addrW += ( (Wave_Size_RT<<bshift) << VEC_SHIF );
        };
    };
};
