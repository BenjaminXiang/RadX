#version 460 core
#extension GL_GOOGLE_include_directive : enable

#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared uint localHistogram[RADICES];

// planned 64-wide for Turing
shared m8pq KTYPE _data[Wave_Size];
shared uvec4 addrL[Wave_Size];
shared highp uvec4[VEC_SIZE] validAddressL;
shared blocks_info blocks;
#define key _data[Lane_Idx]
#define bcount blocks.count

#ifndef ENABLE_TURING_INSTRUCTION_SET
initSubgroupIncFunctionTarget(localHistogram[WHERE], countOffset, 1, uint)
#endif

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);


#define addr addrL[Lane_Idx]
#define addrW addr[w]

#define validAddressW subgroupInverseBallot(validAddressL[w])
//#define validAddress bvec4(subgroupInverseBallot(validAddressL[0]),subgroupInverseBallot(validAddressL[1]),subgroupInverseBallot(validAddressL[2]),subgroupInverseBallot(validAddressL[3]))

#ifdef ENABLE_TURING_INSTRUCTION_SET
#define validAddress validAddressW
#else
#define validAddress lessThan(addr,uvec4(blocks.limit))
#endif


void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + Wave_Idx);
    const lowp uint Wr = Wc * Wave_Idx;

    // set prefix sum (planned distribute threads)
    [[flatten]] if (Wave_Idx == 0u) 
        [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=Wave_Size_RT) {
        const lowp uint radice = rk + Lane_Idx;
        [[flatten]] if (radice < RADICES) localHistogram[radice+0u] = PrefixSum[gl_WorkGroupID.x * RADICES + radice];
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(push_block.NumKeys), bcount = min(blocks.count, 1048576u);
    LGROUP_BARRIER
    [[flatten]] IFANY (bcount <= 0) return;

    // calculate blocks
    const lowp uint w = Wave_Idx;
    [[flatten]] if (Wave_Idx < VEC_SIZE) addrW = w*Wave_Size_RT + blocks.offset + Lane_Idx;
    
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        LGROUP_BARRIER
        [[flatten]] if (Wave_Idx < VEC_SIZE) 
            validAddressL[w] = subgroupBallot(lessThan(addrW, blocks.limit));
        
        IFALL(all(not(validAddress))) break;
        LGROUP_BARRIER

        [[flatten]] if (Wave_Idx < VEC_SIZE) 
        { //const lowp uint w = Wave_Idx;
#ifdef READ_U8
            { key[Wave_Idx] = validAddressW ? Key8n[addrW][push_block.Shift] : utype_t(0xFFu); };
#else
            { key[Wave_Idx] = utype_t(BFE(validAddressW ? Key8n[addrW][push_block.Shift>>1u] : OutOfRange, (push_block.Shift&1)*BITS_PER_PASS, BITS_PER_PASS)); };
#endif
        };
        LGROUP_BARRIER

#ifdef ENABLE_TURING_INSTRUCTION_SET
        [[flatten]] if (Wave_Idx == 0u) 
#endif
        [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++) 
        {
#ifdef ENABLE_TURING_INSTRUCTION_SET
            const highp uvec4 blt = subgroupPartitionNV(key[w])&validAddressL[w];
            const uint btc = subgroupPartitionedAddNV(1u,blt), btl = subgroupPartitionedExclusiveAddNV(1u,blt), fLn = subgroupBallotFindMSB(blt);
            uint cntl = 0u; [[flatten]] if (fLn == Lane_Idx && validAddressW) { cntl = add(localHistogram[uint(key[w])], btc); };
            {
                const uint offset = subgroupShuffle(cntl,fLn) + btl;
                [[flatten]] if (validAddressW) { ValueTmp[offset] = ValueIn[addrW], KeyTmp[offset] = KeyIn[addrW]; };
            };
#else
#ifdef SIMPLER_SORT
            [[flatten]] if (key[w] == Wr && validAddressW) {
                const uint offset = countOffset(key[w]);
                ValueTmp[offset] = ValueIn[addrW], KeyTmp[offset] = KeyIn[addrW];
            };
#else
            bool found = !validAddressW || keyW<Wr || keyW>=(Wr+Wc);
             for (lowp uint t=0;t<BSIZE;t+=1u) {
                [[flatten]] if (!found && (found = subgroupMin(key[w])==key[w])) {
                    const uint offset = countOffset(keyW);
                    ValueTmp[offset] = ValueIn[addrW], KeyTmp[offset] = KeyIn[addrW];
                };
                [[flatten]] if ( subgroupAll(found) ) { break; };
            };
#endif
#endif
        };
        LGROUP_BARRIER
            [[flatten]] if (Wave_Idx < VEC_SIZE) addrW += ( Wave_Size_RT << VEC_SHIF );
    };
};
