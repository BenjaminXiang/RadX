#version 460 core
#extension GL_GOOGLE_include_directive : enable

#define ENABLE_RTX_EDITION
#define EXTEND_LOCAL_GROUPS
#include "../include/driver.glsl"
#include "../include/mathlib.glsl"
#include "../include/ballotlib.glsl"


#include "./includes.glsl"

layout (local_size_x = BLOCK_SIZE) in;
shared addrw_t localCounts[RADICES], addrL[VEC_SIZE][Wave_Size], localPartitions[RADICES];
shared u32vec4 validAddressL[VEC_SIZE], prtMskL[VEC_SIZE][/*RADICES*/Wave_Size];
shared uint32_t[Wave_Size] prtsumL[VEC_SIZE][ivectr];
shared m8pq utype_v keyL[VEC_SIZE][Wave_Size];
shared blocks_info blocks;

#define addrW addrL[w][ln]
#define keyM keys[push_block.Shift&1].data[addrW+i]
#define keyW keyL[w][ln][i]

#define bcount blocks.count

const uint Wc = RADICES/Wave_Count;
const uint BSIZE = min(Wc,Wave_Size);

// 
//layout ( binding = 0, set = InputKeys, rgba8ui ) uniform workgroupcoherent uimageBuffer keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysB { keytp_t data[]; } keys[];
  layout ( binding = 0, set = InputKeys, scalar ) readonly subgroupcoherent buffer KeysInB { keytp_t data[]; } keysIn[];
  layout ( binding = 0, set = InputKeys, scalar )          subgroupcoherent buffer KeysOutB { keytp_t data[]; } keysOut[];

// 
layout ( binding = 4, set = 0, scalar ) readonly workgroupcoherent buffer PrefixSumB { uint partitions[][RADICES]; };


// 
const lowp int blp = 10-bshift;
void main() {
    //const m8pq utype_t Radice_Idx = utype_t(gl_WorkGroupID.y * Wave_Count_RX + w);
    //const lowp uint w = Wave_Idx, Wr = Wc * w;
    const lowp uint w = Wave_Idx, wT = w>>VEC_SHIF, wC = Wave_Count_RT>>VEC_SHIF, ln = Lane_Idx;
    const lowp uint wID = Lane_Idx&7, smID = Lane_Idx>>3;

    // clear histogram of block (planned distribute threads)
    [[unroll]] for (lowp uint rk=0u;rk<RADICES;rk+=gl_WorkGroupSize.x) { const lowp uint radice = rk + Local_Idx;
        [[flatten]] if (radice < RADICES) { localPartitions[radice] = partitions[gl_WorkGroupID.x][radice], localCounts[radice] = 0u; };
    };
    [[flatten]] if (Local_Idx == 0) blocks = get_blocks_info(NumElements), bcount = min(blocks.count, 1048576u);
    subgroupBarrier();
    [[flatten]] IFANY (bcount <= 0) return;

    // permute blocks by partitions
    [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { addrW = blocks.offset + (Local_Idx<<bshift); }; };
    subgroupBarrier();
    
    [[dependency_infinite]] for ( uint wk = 0; wk < bcount; wk++ ) {
        btype_v predicate = btype_v(false);
        [[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint i=0;i<ivectr;i++) { 
            predicate wmI = lessThan(addrW+i, addrw_t(blocks.limit));
        }};
        IFALL(all(not(predicate))) break;

        // 
//#define prmskM prtMskL[w][uint(keyW)]
#define prmskM prtMskL[w][Lane_Idx]
#define prmskL prmskM[li]
#define prtsumW prtsumL[w][li][Lane_Idx]

#define validM validAddressL[w]
#define validL validM[li]

        // 
        [[flatten]] if (w < VEC_SIZE) {
            [[unroll]] for (lowp uint i=0;i<ivectr;i++) { keyW = extractKey(keyM, push_block.Shift); };
            validM = fwp_rtx_u4(predicate);
        };

        // 
        //[[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u; prmskL = 0u; }; };
        //[[flatten]] if (w < VEC_SIZE) { [[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u; prmskM = DEF_MASK; }; };

        [[flatten]] if (w < VEC_SIZE) 
        {
            //[[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u; [[flatten]] if (keyW == sgpkpl) prmskL |= sgpexc(keyW) & validL; };
            [[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u; [[flatten]] if (keyW == sgpkpl) prmskL = sgpexc(keyW) & validL; };

            subgroupBarrier();
            [[flatten]] if (w == 0u) [[unroll]] for (lowp uint w=0;w<VEC_SIZE;w++)  // critically calculate partition offset
            [[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u;
                prtsumW = localCounts[uint(keyW)];
                [[flatten]] if (Lane_Idx == lsb(prmskL) && prmskL > 0u) { atomicAdd(localCounts[uint(keyW)], bitcnt(prmskL), gl_ScopeSubgroup, gl_StorageSemanticsShared, gl_SemanticsRelaxed); };
            };

            subgroupBarrier();
            [[unroll]] for (lowp uint li=0;li<ivectr;li++) { const lowp uint ln = (li<<3u)|(Lane_Idx>>2u), i = wID&3u;
                [[flatten]] if (bltinv(prmskL)) { keysOut[1-(push_block.Shift&1)].data[localPartitions[uint(keyW)] + prtsumW + sgpcnt(prmskL)] = keys[push_block.Shift&1].data[addrL[w][0]+(li*Wave_Size_RT+Lane_Idx)]; };
            };

            // 
            addrW += (Wave_Size_RT * VEC_SIZE)<<bshift;
        };
    };
};
